#!/bin/bash
# Based on initial code found on protondb.

############################################################
# Help                                                     #
############################################################
Help()
{
   # Display Help
   echo "Set cpu affinity for specified process(es)."
   echo "Used to help some older games that limit cpu cores."
   echo
   echo "Syntax: -[d|h|p|q|s|v]"
   echo "options:"
   echo "d     Drive letter of the process"
   echo "h     Print this help"
   echo "p     Process name"
   echo "q     Quiet mode"
   echo "s     Seconds to sleep"
   echo "v     Verbose mode"
   echo
}

############################################################
# Main                                                     #
############################################################

# Default settings
declare procName="\(Blacklist_DX11\|conviction\)_game"
declare drive="Z"
declare -i secsToSleep=5
declare showOutput=true
declare verbose=false

# Get the options
while getopts ":dhpqsv" option; do
   case $option in
      d) # Drive letter
         declare drive=$OPTARG;;
      h) # display Help
         Help
         exit;;
      p) # Process name / regex
         declare procName=$OPTARG;;
      q) # Quiet mode
         showOutput=false;;
      s) # Seconds to sleep
         declare -i secsToSleep=$OPTARG;;
      v) # Verbose mode
         verbose=true;;
      \?) # Invalid option
         echo "Error: Invalid option"
         Help
         exit;;
   esac
done

# Get the number of cpu cores
if [ "$verbose" = true ]; then echo Attempting to get the number of cores from nproc...; fi
declare -i cores=`nproc --all 2>/dev/null`
if [ "$verbose" = true ]; then echo Number of cores returned from nproc was "$cores".; fi

if [ $cores -eq 0 ]; then
  # If nproc didn't work, try getconf
  if [ "$verbose" = true ]; then echo Attempting to get the number of cores from getconf...; fi
  declare -i cores=`getconf _NPROCESSORS_ONLN 2>/dev/null`
  if [ "$verbose" = true ]; then echo Number of cores returned from getconf was "$cores".; fi
fi

if [ $cores -eq 0 ]; then
  echo Fatal Error: Unable to get number of cores using nproc or getconf, aborting.
  exit
fi

declare -i coreLimit=($cores-1)
if [ "$verbose" = true ]; then echo Core limit set to "$coreLimit".; fi

if [ "$verbose" = true ]; then echo Starting loop to check for "$procName" running on drive "$drive".; fi

while :
do
  pid=`ps ax | grep "$procName" | grep "$drive": | awk '{ print $1 }'`;
  if [ -n "$pid" ]; then
    if [ "$showOutput" = true ]; then echo Setting cpu cores for pid $pid...; fi
    taskset -cap 0-"$coreLimit" "$pid" > /dev/null 2>&1
  else
    if [ "$showOutput" = true ]; then echo No matching process found for \'"$procName"\'...; fi
  fi
  sleep $secsToSleep
done
